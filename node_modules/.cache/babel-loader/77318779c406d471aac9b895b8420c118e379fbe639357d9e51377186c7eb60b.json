{"ast":null,"code":"var _jsxFileName = \"C:\\\\Estudos Programa\\xE7\\xE3o\\\\React native\\\\My Ponto\\\\My_ponto\\\\My_ponto\\\\frontend\\\\app\\\\src\\\\componentes\\\\Registropt.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getDataAtual = () => {\n  const hoje = new Date();\n  return hoje.toLocaleDateString();\n};\nconst getHoraAtual = () => {\n  const agora = new Date();\n  return agora.toLocaleTimeString();\n};\nfunction RegistroPonto() {\n  _s();\n  const [hora, setHora] = useState(getHoraAtual());\n  const [userId, setUserId] = useState(null);\n  const [nome, setNome] = useState('');\n  const [ctponto, setConsulta] = useState([]);\n  const [tpPonto, setTpPonto] = useState(false);\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [latitude, setLatitude] = useState(null);\n  const [longitude, setLongitude] = useState(null);\n  const [publicIP, setPublicIP] = useState(null);\n  const [ultimatp_reg, setUltimatp_reg] = useState(0);\n  const [localIPv4, setLocalIPv4] = useState(null);\n  useEffect(() => {\n    const userIdFromStorage = Number(localStorage.getItem('userId'));\n    const nomeFromStorage = localStorage.getItem('nome');\n    setUserId(userIdFromStorage);\n    setNome(nomeFromStorage);\n    const intervalo = setInterval(() => {\n      setHora(getHoraAtual());\n    }, 1000);\n    getLocation();\n    getLocalIPv4();\n    if (userIdFromStorage) {\n      consultaPonto(userIdFromStorage);\n    }\n    return () => clearInterval(intervalo);\n  }, []);\n  const consultaPonto = async idUsuario => {\n    const consultapt = {\n      userId: idUsuario,\n      data: getDataAtual()\n    };\n    setLoading(true);\n    try {\n      const response = await axios.post('http://localhost:3001/auth/CTPonto', consultapt);\n      const registrosConsultados = response.data.registros.map(registro => ({\n        id: registro.id,\n        dt_ponto: registro.dt_ponto,\n        tp_reg: registro.tp_reg,\n        forma: registro.forma,\n        hora: registro.hora\n      }));\n      if (registrosConsultados.length === 0) {\n        setUltimatp_reg(1);\n      } else {\n        let maiortp_reg = 0;\n        registrosConsultados.forEach(registro => {\n          if (registro.tp_reg >= maiortp_reg) {\n            maiortp_reg = registro.tp_reg;\n          }\n        });\n        setUltimatp_reg(maiortp_reg + 1);\n      }\n      setConsulta(registrosConsultados);\n    } catch (error) {\n      setError('Não há pontos registrados hoje');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const getLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(showPosition);\n    } else {\n      console.log(\"Geolocalização não é suportada por este navegador.\");\n    }\n  };\n  const showPosition = async position => {\n    const lat = position.coords.latitude;\n    const lng = position.coords.longitude;\n    setLatitude(lat);\n    setLongitude(lng);\n    const ip = await getPublicIP();\n    setPublicIP(ip);\n  };\n  const getPublicIP = async () => {\n    try {\n      const response = await axios.get('https://api.ipify.org?format=json');\n      const ip = response.data.ip;\n      return ip;\n    } catch (error) {\n      console.error(\"Erro ao obter endereço IP público:\", error);\n      return null;\n    }\n  };\n  const getLocalIPv4 = () => {\n    try {\n      const {\n        RTCPeerConnection\n      } = window;\n      if (RTCPeerConnection) {\n        const connection = new RTCPeerConnection({\n          iceServers: []\n        });\n        connection.createDataChannel('');\n        connection.onicecandidate = async event => {\n          try {\n            const candidate = event.candidate;\n            if (candidate) {\n              const ipRegex = /([0-9]{1,3}(\\.[0-9]{1,3}){3})/;\n              const match = ipRegex.exec(candidate.candidate);\n              if (match && match.length >= 2) {\n                const localIPv4 = match[1];\n                setLocalIPv4(localIPv4);\n                connection.close();\n              }\n            }\n          } catch (error) {\n            console.error(\"Erro ao obter IPv4 local:\", error);\n          }\n        };\n        connection.createOffer().then(offer => connection.setLocalDescription(offer));\n      } else {\n        console.log(\"RTCPeerConnection não suportado.\");\n      }\n    } catch (error) {\n      console.error(\"Erro ao tentar obter IPv4 local:\", error);\n    }\n  };\n  const registrarPonto = async () => {\n    const tipoPonto = tpPonto ? 'saída' : 'entrada';\n    const nvtp_reg = ultimatp_reg;\n    const novoRegistro = {\n      data: getDataAtual(),\n      hora: getHoraAtual(),\n      tipo: tipoPonto\n    };\n    setLoading(true);\n    try {\n      const response = await axios.post('http://localhost:3001/auth/RGPonto', {\n        userId: userId,\n        data: getDataAtual(),\n        tp_reg: nvtp_reg,\n        forma: 1,\n        // Forma fixa definida como 1\n        hora: getHoraAtual(),\n        latitude: latitude,\n        longitude: longitude,\n        ip: publicIP,\n        ipv4: localIPv4\n      });\n      const {\n        tp_reg,\n        hora,\n        forma,\n        status\n      } = response.data;\n      localStorage.setItem('tp_reg', tp_reg);\n      localStorage.setItem('hora', hora);\n      localStorage.setItem('forma', forma);\n      localStorage.setItem('status', status);\n\n      // Atualiza a lista de registros após o sucesso do registro\n      consultaPonto(userId);\n    } catch (error) {\n      setError('Erro ao registrar ponto');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const descricaoBotao = tpPonto ? 'Saída' : 'Entrada';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Registro de ponto\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Nome: \", nome]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Latitude: \", latitude]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Longitude: \", longitude]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Endere\\xE7o IP p\\xFAblico: \", publicIP]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Endere\\xE7o IPv4 local: \", localIPv4]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Registros:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: ctponto.map((registro, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"btn-app\",\n        children: [registro.forma === 1 && /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \" Registro Autom\\xE1tico\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 50\n        }, this), \" -\", registro.tp_reg === 1 && /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \" Entrada \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 51\n        }, this), \"\\xC0s \", registro.hora]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: `btn-app-${descricaoBotao.toLowerCase()}`,\n      onClick: registrarPonto,\n      disabled: loading,\n      children: loading ? 'Registrando...' : `Registrar ${descricaoBotao} às ${hora}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 9\n  }, this);\n}\n_s(RegistroPonto, \"KJah13lNol3S74yvLAdvtCgu/+8=\");\n_c = RegistroPonto;\nexport default RegistroPonto;\nvar _c;\n$RefreshReg$(_c, \"RegistroPonto\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","getDataAtual","hoje","Date","toLocaleDateString","getHoraAtual","agora","toLocaleTimeString","RegistroPonto","_s","hora","setHora","userId","setUserId","nome","setNome","ctponto","setConsulta","tpPonto","setTpPonto","error","setError","loading","setLoading","latitude","setLatitude","longitude","setLongitude","publicIP","setPublicIP","ultimatp_reg","setUltimatp_reg","localIPv4","setLocalIPv4","userIdFromStorage","Number","localStorage","getItem","nomeFromStorage","intervalo","setInterval","getLocation","getLocalIPv4","consultaPonto","clearInterval","idUsuario","consultapt","data","response","post","registrosConsultados","registros","map","registro","id","dt_ponto","tp_reg","forma","length","maiortp_reg","forEach","navigator","geolocation","getCurrentPosition","showPosition","console","log","position","lat","coords","lng","ip","getPublicIP","get","RTCPeerConnection","window","connection","iceServers","createDataChannel","onicecandidate","event","candidate","ipRegex","match","exec","close","createOffer","then","offer","setLocalDescription","registrarPonto","tipoPonto","nvtp_reg","novoRegistro","tipo","ipv4","status","setItem","descricaoBotao","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","index","className","toLowerCase","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Estudos Programação/React native/My Ponto/My_ponto/My_ponto/frontend/app/src/componentes/Registropt.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst getDataAtual = () => {\r\n    const hoje = new Date();\r\n    return hoje.toLocaleDateString();\r\n};\r\n\r\nconst getHoraAtual = () => {\r\n    const agora = new Date();\r\n    return agora.toLocaleTimeString();\r\n};\r\n\r\nfunction RegistroPonto() {\r\n    const [hora, setHora] = useState(getHoraAtual());\r\n    const [userId, setUserId] = useState(null);\r\n    const [nome, setNome] = useState('');\r\n    const [ctponto, setConsulta] = useState([]);\r\n    const [tpPonto, setTpPonto] = useState(false);\r\n    const [error, setError] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const [latitude, setLatitude] = useState(null);\r\n    const [longitude, setLongitude] = useState(null);\r\n    const [publicIP, setPublicIP] = useState(null);\r\n    const [ultimatp_reg, setUltimatp_reg] = useState(0);\r\n    const [localIPv4, setLocalIPv4] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const userIdFromStorage = Number(localStorage.getItem('userId'));\r\n        const nomeFromStorage = localStorage.getItem('nome');\r\n        setUserId(userIdFromStorage);\r\n        setNome(nomeFromStorage);\r\n\r\n        const intervalo = setInterval(() => {\r\n            setHora(getHoraAtual());\r\n        }, 1000);\r\n\r\n        getLocation();\r\n        getLocalIPv4();\r\n        if (userIdFromStorage) {\r\n            consultaPonto(userIdFromStorage);\r\n        }\r\n\r\n        return () => clearInterval(intervalo);\r\n    }, []);\r\n\r\n    const consultaPonto = async (idUsuario) => {\r\n        const consultapt = { userId: idUsuario, data: getDataAtual() };\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await axios.post('http://localhost:3001/auth/CTPonto', consultapt);\r\n\r\n            const registrosConsultados = response.data.registros.map(registro => ({\r\n                id: registro.id,\r\n                dt_ponto: registro.dt_ponto,\r\n                tp_reg: registro.tp_reg,\r\n                forma: registro.forma,\r\n                hora: registro.hora\r\n            }));\r\n\r\n            if (registrosConsultados.length === 0) {\r\n                setUltimatp_reg(1);\r\n            } else {\r\n                let maiortp_reg = 0;\r\n                registrosConsultados.forEach(registro => {\r\n                    if (registro.tp_reg >= maiortp_reg) {\r\n                        maiortp_reg = registro.tp_reg;\r\n                    }\r\n                });\r\n                setUltimatp_reg(maiortp_reg + 1);\r\n            }\r\n\r\n            setConsulta(registrosConsultados);\r\n\r\n        } catch (error) {\r\n            setError('Não há pontos registrados hoje');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const getLocation = () => {\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(showPosition);\r\n        } else {\r\n            console.log(\"Geolocalização não é suportada por este navegador.\");\r\n        }\r\n    };\r\n\r\n    const showPosition = async (position) => {\r\n        const lat = position.coords.latitude;\r\n        const lng = position.coords.longitude;\r\n        setLatitude(lat);\r\n        setLongitude(lng);\r\n\r\n        const ip = await getPublicIP();\r\n        setPublicIP(ip);\r\n    };\r\n\r\n    const getPublicIP = async () => {\r\n        try {\r\n            const response = await axios.get('https://api.ipify.org?format=json');\r\n            const ip = response.data.ip;\r\n            return ip;\r\n        } catch (error) {\r\n            console.error(\"Erro ao obter endereço IP público:\", error);\r\n            return null;\r\n        }\r\n    };\r\n\r\n    const getLocalIPv4 = () => {\r\n        try {\r\n            const { RTCPeerConnection } = window;\r\n            if (RTCPeerConnection) {\r\n                const connection = new RTCPeerConnection({ iceServers: [] });\r\n                connection.createDataChannel('');\r\n                connection.onicecandidate = async (event) => {\r\n                    try {\r\n                        const candidate = event.candidate;\r\n                        if (candidate) {\r\n                            const ipRegex = /([0-9]{1,3}(\\.[0-9]{1,3}){3})/;\r\n                            const match = ipRegex.exec(candidate.candidate);\r\n                            if (match && match.length >= 2) {\r\n                                const localIPv4 = match[1];\r\n                                setLocalIPv4(localIPv4);\r\n                                connection.close();\r\n                            }\r\n                        }\r\n                    } catch (error) {\r\n                        console.error(\"Erro ao obter IPv4 local:\", error);\r\n                    }\r\n                };\r\n                connection.createOffer().then(offer => connection.setLocalDescription(offer));\r\n            } else {\r\n                console.log(\"RTCPeerConnection não suportado.\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Erro ao tentar obter IPv4 local:\", error);\r\n        }\r\n    };\r\n\r\n    const registrarPonto = async () => {\r\n        const tipoPonto = tpPonto ? 'saída' : 'entrada';\r\n        const nvtp_reg = ultimatp_reg;\r\n        const novoRegistro = { data: getDataAtual(), hora: getHoraAtual(), tipo: tipoPonto };\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await axios.post('http://localhost:3001/auth/RGPonto', {\r\n                userId: userId,\r\n                data: getDataAtual(),\r\n                tp_reg: nvtp_reg,\r\n                forma: 1, // Forma fixa definida como 1\r\n                hora: getHoraAtual(),\r\n                latitude: latitude,\r\n                longitude: longitude,\r\n                ip: publicIP,\r\n                ipv4: localIPv4\r\n            });\r\n\r\n            const { tp_reg, hora, forma, status } = response.data;\r\n            localStorage.setItem('tp_reg', tp_reg);\r\n            localStorage.setItem('hora', hora);\r\n            localStorage.setItem('forma', forma);\r\n            localStorage.setItem('status', status);\r\n\r\n            // Atualiza a lista de registros após o sucesso do registro\r\n            consultaPonto(userId);\r\n\r\n        } catch (error) {\r\n            setError('Erro ao registrar ponto');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const descricaoBotao = tpPonto ? 'Saída' : 'Entrada';\r\n\r\n    return (\r\n        <div>\r\n            <h2>Registro de ponto</h2>\r\n            <p>Nome: {nome}</p>\r\n            <p>Latitude: {latitude}</p>\r\n            <p>Longitude: {longitude}</p>\r\n            <p>Endereço IP público: {publicIP}</p>\r\n            <p>Endereço IPv4 local: {localIPv4}</p>\r\n            <h3>Registros:</h3>\r\n            {error && <p style={{ color: 'red' }}>{error}</p>}\r\n            <ul>\r\n                {ctponto.map((registro, index) => (\r\n                    <li className='btn-app' key={index}>\r\n                        {registro.forma === 1 && <span> Registro Automático</span>} - \r\n                        {registro.tp_reg === 1 && <span> Entrada </span>} \r\n                        Às {registro.hora}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n            <button className={`btn-app-${descricaoBotao.toLowerCase()}`} onClick={registrarPonto} disabled={loading}>\r\n                {loading ? 'Registrando...' : `Registrar ${descricaoBotao} às ${hora}`}\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RegistroPonto;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}