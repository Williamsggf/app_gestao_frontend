{"ast":null,"code":"const formatCPF = value => {\n  // Remove qualquer caractere que não seja número\n  value = value.replace(/\\D/g, '');\n\n  // Adiciona pontos e hífen conforme necessário\n  if (value.length > 9) {\n    value = value.replace(/^(\\d{3})(\\d{3})(\\d{3})(\\d{2})$/, '$1.$2.$3-$4');\n  } else if (value.length > 6) {\n    value = value.replace(/^(\\d{3})(\\d{3})(\\d{3})/, '$1.$2.$3');\n  } else if (value.length > 3) {\n    value = value.replace(/^(\\d{3})(\\d{3})/, '$1.$2');\n  }\n  return value;\n};","map":{"version":3,"names":["formatCPF","value","replace","length"],"sources":["C:/Estudos probramação/react-login/frontend/app/src/componentes/formatCPF.js"],"sourcesContent":["const formatCPF = (value) => {\r\n    // Remove qualquer caractere que não seja número\r\n    value = value.replace(/\\D/g, '');\r\n  \r\n    // Adiciona pontos e hífen conforme necessário\r\n    if (value.length > 9) {\r\n      value = value.replace(/^(\\d{3})(\\d{3})(\\d{3})(\\d{2})$/, '$1.$2.$3-$4');\r\n    } else if (value.length > 6) {\r\n      value = value.replace(/^(\\d{3})(\\d{3})(\\d{3})/, '$1.$2.$3');\r\n    } else if (value.length > 3) {\r\n      value = value.replace(/^(\\d{3})(\\d{3})/, '$1.$2');\r\n    }\r\n  \r\n    return value;\r\n  };\r\n  "],"mappings":"AAAA,MAAMA,SAAS,GAAIC,KAAK,IAAK;EACzB;EACAA,KAAK,GAAGA,KAAK,CAACC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;;EAEhC;EACA,IAAID,KAAK,CAACE,MAAM,GAAG,CAAC,EAAE;IACpBF,KAAK,GAAGA,KAAK,CAACC,OAAO,CAAC,gCAAgC,EAAE,aAAa,CAAC;EACxE,CAAC,MAAM,IAAID,KAAK,CAACE,MAAM,GAAG,CAAC,EAAE;IAC3BF,KAAK,GAAGA,KAAK,CAACC,OAAO,CAAC,wBAAwB,EAAE,UAAU,CAAC;EAC7D,CAAC,MAAM,IAAID,KAAK,CAACE,MAAM,GAAG,CAAC,EAAE;IAC3BF,KAAK,GAAGA,KAAK,CAACC,OAAO,CAAC,iBAAiB,EAAE,OAAO,CAAC;EACnD;EAEA,OAAOD,KAAK;AACd,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}